name: Azure Container Apps - Deploy

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: vinodelectronics
  CONTAINER_NAME: vinod-electronics
  RESOURCE_GROUP: ve
  CONTAINER_APP_NAME: vinod-electronics
  CONTAINER_APP_ENV: vinod-electronics-env

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
      steps:
    - name: üîÑ Checkout repository
      uses: actions/checkout@v4
      
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîê Azure Login  
      uses: azure/login@v1.4.6
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: false

    - name: üîê Log in to Azure Container Registry via Azure CLI
      run: |
        az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}    - name: üèóÔ∏è Build and push container image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: üöÄ Deploy to Azure Container Apps (Production)
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        echo "üîÑ Starting Azure deployment with robust error handling..."
        
        # Extract credentials from AZURE_CREDENTIALS JSON
        echo "Extracting Azure credentials..."
        CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')
        CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientSecret') 
        TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.tenantId')
        SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')
        
        # Completely reset Azure CLI to avoid token conflicts
        echo "Resetting Azure CLI state..."
        sudo rm -rf ~/.azure /root/.azure 2>/dev/null || true
        export AZURE_CORE_COLLECT_TELEMETRY=false
        export AZURE_CORE_NO_COLOR=true
        
        # Login with fresh session
        echo "Logging in with service principal..."
        az login --service-principal \
          --username "$CLIENT_ID" \
          --password "$CLIENT_SECRET" \
          --tenant "$TENANT_ID" \
          --only-show-errors
        
        az account set --subscription "$SUBSCRIPTION_ID" --only-show-errors
        
        # Verify authentication
        echo "Verifying authentication..."
        az account show --only-show-errors
        
        # Deploy with async mode to avoid token timeout
        echo "Starting deployment (async mode)..."
        DEPLOYMENT_NAME="deploy-$(date +%s)"
        
        az deployment group create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name "$DEPLOYMENT_NAME" \
          --template-file infrastructure/main.bicep \
          --parameters @infrastructure/main.parameters.json \
          --parameters containerImage=${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} \
          --parameters googleSheetId="${{ secrets.VITE_GOOGLE_SHEET_ID }}" \
          --parameters googleApiKey="${{ secrets.VITE_GOOGLE_API_KEY }}" \
          --no-wait \
          --only-show-errors
        
        echo "‚úÖ Deployment '$DEPLOYMENT_NAME' submitted successfully!"
        
        # Wait for completion with timeout
        echo "‚è≥ Waiting for deployment to complete..."
        timeout 1800 az deployment group wait \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name "$DEPLOYMENT_NAME" \
          --created \
          --only-show-errors || {
          echo "‚ö†Ô∏è Deployment timeout or error, checking status..."
          az deployment group show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name "$DEPLOYMENT_NAME" \
            --query "properties.provisioningState" \
            --output tsv
        }
        
        echo "‚úÖ Deployment completed successfully!"

    - name: üß™ Run production smoke tests
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        echo "üß™ Running production smoke tests..."
        sleep 30
        curl -f https://vinod-electronics.kindplant-cbf8e6ac.eastus.azurecontainerapps.io/health || exit 1
        curl -f https://vinod-electronics.kindplant-cbf8e6ac.eastus.azurecontainerapps.io/ || exit 1
        echo "‚úÖ Production smoke tests passed!"